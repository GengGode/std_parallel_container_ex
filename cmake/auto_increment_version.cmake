function(parse_version_file version_file)
    file(READ "${version_file}" version_file_content)
    string(STRIP "${version_file_content}" version_file_content)
    message(STATUS "当前编译版本: ${version_file_content}")
    string(REPLACE "." ";" version_content_list "${version_file_content}")
    list(GET version_content_list 0 version_major)
    list(GET version_content_list 1 version_minor)
    list(GET version_content_list 2 version_patch)
    set(PROJECT_VERSION_MAJOR ${version_major} PARENT_SCOPE)
    set(PROJECT_VERSION_MINOR ${version_minor} PARENT_SCOPE)
    set(PROJECT_VERSION_PATCH ${version_patch} PARENT_SCOPE)
endfunction(parse_version_file)

function(version_file_patch_update version_file)
    file(READ "${version_file}" version_file_content)
    string(REPLACE "." ";" version_content_list "${version_file_content}")
    list(GET version_content_list 0 version_major)
    list(GET version_content_list 1 version_minor)
    list(GET version_content_list 2 version_patch)
    math(EXPR version_patch "${version_patch} + 1")
    set(version_file_content "${version_major}.${version_minor}.${version_patch}")
    file(WRITE "${version_file}" "${version_file_content}")
endfunction(version_file_patch_update)

function(get_commit_hash hash_value)
find_package(Git QUIET)
if(NOT GIT_FOUND)
    message(STATUS "git not found, skip get_commit_hash")
    return()
endif()
execute_process(
    COMMAND ${GIT_EXECUTABLE} log -1 --pretty=format:%h
    OUTPUT_VARIABLE git_last_commit_hash
    OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)
set(${hash_value} ${git_last_commit_hash} PARENT_SCOPE)
endfunction(get_commit_hash)

function(get_git_branch branch_name)
find_package(Git QUIET)
if(NOT GIT_FOUND)
    message(STATUS "git not found, skip get_git_branch")
    return()
endif()
execute_process(
    COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE git_branch_name
    OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)
set(${branch_name} ${git_branch_name} PARENT_SCOPE)
endfunction(get_git_branch)


function(check_commit_hash_is_dirty is_dirty)
    execute_process(
        COMMAND git diff-index --quiet HEAD --
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        RESULT_VARIABLE git_diff_index_result )
    if(git_diff_index_result EQUAL 0)
        set(${is_dirty} "false" PARENT_SCOPE)
    else()
        set(${is_dirty} "true" PARENT_SCOPE)
    endif()
endfunction(check_commit_hash_is_dirty)

function(auto_increment_version_file build_version_file version_file)
    get_commit_hash(new_hash)
    get_git_branch(git_branch_name)
    set(current_build_version "${git_branch_name}-${new_hash}")
    message(STATUS "当前版本号: ${current_build_version}")
    if(is_dirty)
        message(STATUS "当前版本有修改, 不自动更新版本号")
        return()
    endif()
    if(EXISTS "${build_version_file}")
        file(READ "${build_version_file}" old_build_version)
        message(STATUS "上次编译版本号: ${old_build_version}")
        if(NOT "${old_build_version}" STREQUAL "${current_build_version}")
            message(STATUS "当前版本号与上次编译版本号不一致, 自动更新版本号")
            version_file_patch_update("${version_file}")
            file(WRITE "${build_version_file}" "${current_build_version}")
        endif()
    else()
        message(STATUS "当前版本号文件不存在, 自动更新版本号")
        if(EXISTS "${version_file}")
            file(READ "${version_file}" old_build_version)
            message(STATUS "上次编译版本号: ${old_build_version}")
        else()
            message(STATUS "当前版本号文件不存在, 使用默认版本号 0.0.0")
            set(old_build_version "0.0.0")
            file(WRITE "${version_file}" "${old_build_version}")
        endif()
        message(STATUS "当前版本号: ${old_build_version}")
        version_file_patch_update("${version_file}")
        file(WRITE "${build_version_file}" "${current_build_version}")
    endif()
endfunction(auto_increment_version_file)

macro(auto_generate_version version_file build_version_file)
    auto_increment_version_file("${build_version_file}" "${version_file}")
    if(EXISTS "${version_file}")
        parse_version_file("${version_file}")
    endif()
endmacro(auto_generate_version)

